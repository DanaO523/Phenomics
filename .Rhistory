Correlation_df[k, 4] = temp[[2]][1]
Correlation_df[k, 5] = temp[[4]][1]
Correlation_df[k, 6] = temp[[3]][1]
k = 1+k
}
}
BHCorrection = p.adjust(Correlation_df[,6], method = "BH")
Correlation_df=cbind(Correlation_df, BHCorrection)
SigCorr_df = Correlation_df[which(Correlation_df$BHCorrection < 0.05),]
PositiveCorr = SigCorr_df[which(SigCorr_df$CorrValue > 0),c(1,2)]
NegativeCorr = SigCorr_df[which(SigCorr_df$CorrValue < 0),c(1,2)]
write.csv(PositiveCorr, file = "PosCorrelation_padj.csv", row.names = FALSE)
write.csv(NegativeCorr, file = "NegCorrelation_padj.csv", row.names = FALSE)
CorrelationMatrix= CorrelationMatrix[-which(rownames(CorrelationMatrix) == "Glucose"), -which(colnames(CorrelationMatrix) == "Glucose")]
CorrelationMatrix
treatments = colnames(GrowthQual_m)[3:ncol(GrowthQual_m)]
CorrelationMatrix = matrix(0, nrow = length(treatments), ncol = length(treatments))
colnames(CorrelationMatrix) = treatments
rownames(CorrelationMatrix) = treatments
Correlation_df = data.frame(Treatment_A = character(), Treatment_B = character(), TValue = numeric(), Df = numeric(), CorrValue = numeric(), Pvalue = numeric())
k = 1
#GrowthQual_m = GrowthQual_m[,-j]
for(i in 3:length(GrowthQual_m)){
for(j in 3:length(GrowthQual_m)){
temp = cor.test(as.numeric(GrowthQual_m[,i]), as.numeric(GrowthQual_m[,j]))
CorrelationMatrix[which(colnames(CorrelationMatrix) == colnames(GrowthQual_m)[i]),which(colnames(CorrelationMatrix) == colnames(GrowthQual_m)[j])] = temp$estimate[[1]]
Correlation_df[k, 1] = colnames(GrowthQual_m)[i]
Correlation_df[k, 2] = colnames(GrowthQual_m)[j]
Correlation_df[k, 3] = temp[[1]][1]
Correlation_df[k, 4] = temp[[2]][1]
Correlation_df[k, 5] = temp[[4]][1]
Correlation_df[k, 6] = temp[[3]][1]
k = 1+k
}
}
BHCorrection = p.adjust(Correlation_df[,6], method = "BH")
Correlation_df=cbind(Correlation_df, BHCorrection)
SigCorr_df = Correlation_df[which(Correlation_df$BHCorrection < 0.05),]
PositiveCorr = SigCorr_df[which(SigCorr_df$CorrValue > 0),c(1,2)]
NegativeCorr = SigCorr_df[which(SigCorr_df$CorrValue < 0),c(1,2)]
write.csv(PositiveCorr, file = "PosCorrelation_padj.csv", row.names = FALSE)
write.csv(NegativeCorr, file = "NegCorrelation_padj.csv", row.names = FALSE)
CorrelationMatrix
CorrelationMatrix= CorrelationMatrix[-which(rownames(CorrelationMatrix) == "Glucose"), -which(colnames(CorrelationMatrix) == "Glucose")]
CorrelationMatrix
COLORS = c("#8EA6CC","#325A99","white", "#EEFEFF","#FFC4AE", "#CCAEAA")
pdf("Correlation_hmap.pdf")
pheatmap(CorrelationMatrix, clustering_distance_rows = "euclidean", cluster_cols = FALSE, clustering_method = "ward", border_color = "black", cellheight = 8, cellwidth = 8,color = colorRampPalette(COLORS)(100))
dev.off()
Species = GrowthQual_m$Species
Species
i = 1
tempData = which(GrowthQual_m$Species == Species[[i]])
tempData
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempData
tempData[which(colnames(tempData) == PositiveCorr[i,1] & colnames(tempData) == PositiveCorr[i,2])
tempData[,which(colnames(tempData) == PositiveCorr[i,1] & colnames(tempData) == PositiveCorr[i,2])]
PositiveCorr[i,2]
which(colnames(tempData) == PositiveCorr[i,1] & colnames(tempData) == PositiveCorr[i,2])
PositiveCorr[i,2]
which(colnames(tempData) == PositiveCorr[i,1])
TraitB = which(colnames(tempData) == PositiveCorr[i,2])
TraitB
TraitA = which(colnames(tempData) == NegativeCorr[i,1])
TraitB = which(colnames(tempData) == NegativeCorr[i,2])
TraitA
TraitB
tempData[,c(TraitA, TraitB)]
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
TraitA = which(colnames(tempData) == NegativeCorr[i,1])
TraitB = which(colnames(tempData) == NegativeCorr[i,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[i,1])
TraitB = which(colnames(tempData) == NegativeCorr[i,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5)
temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5
temp_df[,1] == 1
temp_df[,1] == 1 | temp_df[,1] == 0.5
temp_df[,2] == 1 | temp_df[,2] == 0.5
temp_df[,2]
temp_df
is.na(temp_df[,2]) ==FALSE
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[i,1])
TraitB = which(colnames(tempData) == NegativeCorr[i,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & is.na(temp_df[,1]) == FALSE & temp_df[,2] == 1 | temp_df[,2] == 0.5 & is.na(temp_df[,2]) == FALSE){
tempCount_list[[j]] == 1
}else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
temp_df
TraitA
NegativeCorr[i,1]
NegativeCorr[i,2]
NegativeCorr
NegativeCorr[i,]
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & is.na(temp_df[,1]) == FALSE & temp_df[,2] == 1 | temp_df[,2] == 0.5 & is.na(temp_df[,2]) == FALSE){
tempCount_list[[j]] == 1
}else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
temp_df
temp_df[,2] == 0.5
is.na(temp_df[,2])
temp_df[,1] == 1 | temp_df[,1] == 0.5 & is.na(temp_df[,1]) == FALSE & temp_df[,2] == 1 | temp_df[,2] == 0.5 & is.na(temp_df[,2]
)
150*300
(150*300)/700
temp_df[,2] == 1 | temp_df[,2] == 0.5 & is.na(temp_df[,2]) == FALSE
is.na(temp_df[,2]) == FALSE
temp_df[,2] == 0.5
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}else{
tempCount_list[[j]] == 0
}
}else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
warnings()
NegCorrCounts_df
temp_df[,1] == 1
temp_df
temp_df[,2] == 1
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5){
if(temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}
else{
tempCount_list[[j]] == 0
}
}
}
else{
tempCount_list[[j]] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
warnings()
NegCorrCounts_df
temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5
max(NegCorrCounts_df)
max(NegCorrCounts_df[,2])
tempCount_list
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[j] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[j] == 1
}else{
tempCount_list[j] == 0
}
}else{
tempCount_list[j] == 0
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
f}
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
warnings()
temp_df
is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE){
if(is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5 & temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}
}
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
warnings()
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE){
if(is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == 1 | temp_df[,1] == 0.5){
if(temp_df[,2] == 1 | temp_df[,2] == 0.5){
tempCount_list[[j]] == 1
}
}
}
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
warnings()
NegCorrCounts_df
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(temp_df[,1] == temp_df[,2]){
tempValue = temp_df[,1]
}
if(tempValue == 0.5){
tempValue = 1
}
tempCount_list[[j]] = tempValue
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
temp_df[,1]
temp_df[,2]
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == temp_df[,2]){
tempValue = temp_df[,1]
}
if(tempValue == 0.5){
tempValue = 1
}
tempCount_list[[j]] = tempValue
}
}
NegCorrCounts_df[i,1] = Species[[i]]
NegCorrCounts_df[i,2] = sum(unlist(tempCount_list))
}
unlist(tempCount_list)
VALUES = as.numeric(unlist(tempCount_list))
VALUES
sum(VALUES)
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == temp_df[,2]){
tempValue = temp_df[,1]
}
if(tempValue == 0.5){
tempValue = 1
}
tempCount_list[[j]] = tempValue
}
}
NegCorrCounts_df[i,1] = Species[[i]]
VALUES = as.numeric(unlist(tempCount_list))
NegCorrCounts_df[i,2] = sum(VALUES)
}
warnings()
NegCorrCounts_df
nrow(NegativeCorr)
colnames(TotalGrowthSpecies_df)
BreadthCounts_df = merge(TotalGrowthSpecies_df, NegCorrCounts_df, by = "Species")
BreadthCounts_df
head(BreadthCounts_df)
NegCorrCounts_df = data.frame(Species = character(), NegCorrTrait = numeric())
for(i in 1:length(Species)){
tempData = GrowthQual_m[which(GrowthQual_m$Species == Species[[i]]),]
tempCount_list = list()
for(j in 1:nrow(NegativeCorr)){
tempCount_list[[j]] = list()
TraitA = which(colnames(tempData) == NegativeCorr[j,1])
TraitB = which(colnames(tempData) == NegativeCorr[j,2])
temp_df=tempData[,c(TraitA, TraitB)]
if(is.na(temp_df[,1]) == FALSE & is.na(temp_df[,2]) == FALSE){
if(temp_df[,1] == temp_df[,2]){
tempValue = temp_df[,1]
}
if(tempValue == 0.5){
tempValue = 1
}
tempCount_list[[j]] = tempValue
}
}
NegCorrCounts_df[i,1] = Species[[i]]
VALUES = as.numeric(unlist(tempCount_list))
NegCorrCounts_df[i,2] = sum(VALUES)/2
}
BreadthCounts_df = merge(TotalGrowthSpecies_df, NegCorrCounts_df, by = "Species")
BreadthCounts_df
head(BreadthCounts_df)
test=lm(RawGrowth ~ NegCorrTrait, BreadthCounts_df)
test
summary(Test)
summary(test)
plot(BreadthCounts_df$RawGrowth, BreadthCounts_df$NegCorrTrait)
i = 1
Values = as.numeric(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)])
Values
Values[which(Values == 0.5)] = 1
Values
TotalGrowthSpecies_df <- data.frame(Species = character(), RawGrowth = numeric(), TotalTested = numeric(), GrowthRatio = numeric()) # Creates empty dataframe to quantify growth in
# Designates columns for loop - Removes string matching
SPECIES = 1
RAWGROWTH = 2
TOTALTESTED = 3
GROWTHRATIO = 4
for(i in 1:nrow(GrowthQual_m)){ #Starts loop to quantify growth
Values = as.numeric(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)])
Values[which(Values == 0.5)] = 1
Growth = sum(, na.rm = TRUE) # Calculates raw growth for a species(sum of 1's and 0.5 in the column)
Tested = length(which(is.na(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)]) == FALSE)) # Calculates the number of environments tested for the species (removes NAs)
Ratio = Growth/Tested
TotalGrowthSpecies_df[i,SPECIES] = GrowthQual_m[i, "Species"] # Adds the species name to row i of the dataframe
TotalGrowthSpecies_df[i, RAWGROWTH] = Growth # Adds the number of environments the species could grow in to row i of the dataframe
TotalGrowthSpecies_df[i, TOTALTESTED] = Tested # Adds the number of environments that were tested for the species to row i of the dataframe
TotalGrowthSpecies_df[i, GROWTHRATIO] = Ratio # Calculates the ratio of growth environments a species could grow in to row i of the dataframe
} # Ends loop
# Creates an ordered scatter plot of growth ratios across species
#SpeciesGrowthPlot = ggplot(TotalGrowthSpecies_df, aes(x = reorder(TotalGrowthSpecies_df$Species, TotalGrowthSpecies_df$GrowthRatio, order = is.ordered(TotalGrowthSpecies_df$Species)), y = GrowthRatio))+geom_point(stat = "identity")
#SpeciesGrowthPlot = SpeciesGrowthPlot +theme_bw()+xlab("Species")+ylab("Growth Ratio")+theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 8, angle = 90),axis.text.y = element_text(size = 5), strip.text.y = element_text(size = 12))
#ggsave(paste("SpeciesGrowthPlot", Sys.Date(), ".pdf", sep = ""))
# Creates a histogram of growth ratios across species
a = ggplot(TotalGrowthSpecies_df, aes(GrowthRatio))+geom_histogram(binwidth = 0.05, fill = "gray", colour = "black")
a = a + theme_bw()+xlab("Growth Ratio")+ylab("Frequency")+theme(axis.title.x = element_text(size = 12), axis.text.x = element_text(size = 8, angle = 90),axis.text.y = element_text(size = 8), strip.text.y = element_text(size = 12))
ggsave(paste("SpeciesGrowthBreadth_histogram_", Sys.Date(), ".pdf", sep = ""))
TotalGrowthSpecies_df <- data.frame(Species = character(), RawGrowth = numeric(), TotalTested = numeric(), GrowthRatio = numeric()) # Creates empty dataframe to quantify growth in
# Designates columns for loop - Removes string matching
SPECIES = 1
RAWGROWTH = 2
TOTALTESTED = 3
GROWTHRATIO = 4
for(i in 1:nrow(GrowthQual_m)){ #Starts loop to quantify growth
Values = as.numeric(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)])
Values[which(Values == 0.5)] = 1
Growth = sum(Values, na.rm = TRUE) # Calculates raw growth for a species(sum of 1's and 0.5 in the column)
Tested = length(which(is.na(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)]) == FALSE)) # Calculates the number of environments tested for the species (removes NAs)
Ratio = Growth/Tested
TotalGrowthSpecies_df[i,SPECIES] = GrowthQual_m[i, "Species"] # Adds the species name to row i of the dataframe
TotalGrowthSpecies_df[i, RAWGROWTH] = Growth # Adds the number of environments the species could grow in to row i of the dataframe
TotalGrowthSpecies_df[i, TOTALTESTED] = Tested # Adds the number of environments that were tested for the species to row i of the dataframe
TotalGrowthSpecies_df[i, GROWTHRATIO] = Ratio # Calculates the ratio of growth environments a species could grow in to row i of the dataframe
} # Ends loop
TotalGrowthSpecies_df
head(TotalGrowthSpecies_df)
Values
Values
Values = as.numeric(GrowthQual_m[i,TESTCOLSTART:ncol(GrowthQual_m)])
Values
BreadthCounts_df = merge(TotalGrowthSpecies_df, NegCorrCounts_df, by = "Species")
test=lm(RawGrowth ~ NegCorrTrait, BreadthCounts_df)
summary(test)
plot(BreadthCounts_df$RawGrowth, BreadthCounts_df$NegCorrTrait)
hist(NegCorrCounts_df[,2])
max(NegCorrCounts_df[,2])
NegCorrTraits[which(NegCorrTraits[,2] = max(NegCorrCounts_df[,2])),"Species"]
NegCorrTraits[which(NegCorrTraits[,2] == max(NegCorrCounts_df[,2])),"Species"]
NegCorrCounts_df[which(NegCorrTraits[,2] == max(NegCorrCounts_df[,2])),"Species"]
NegCorrCounts_df[which(NegCorrCounts_df[,2] == max(NegCorrCounts_df[,2])),"Species"]
GrowthQualGenera_m
GrowthQualGenus_m
GrowthQualGenera_m = read.csv("GrowthQual_mGenus.csv.csv", header = TRUE, row.names = 1)
GrowthQualGenera_m = read.csv("GrowthQual_mGenus.csv", header = TRUE, row.names = 1)
GrowthQualGenera_m = read.csv("GrowthQual_mGenus.csv", header = TRUE)
GrowthQualGenera_m
GrowthQualGenera_m = read.csv("GrowthQual_mGenus.csv", header = TRUE)
GrowthQualGenera_m
colnames(GrowthQualGenera_m)
GeneraSplit = splitBy("X", GrowthQualGenera_m)
GeneraSplit
